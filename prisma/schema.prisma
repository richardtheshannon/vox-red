// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("users")
}

model Article {
  id               String    @id @default(uuid())
  title            String    @db.VarChar(255)
  subtitle         String?   @db.VarChar(500)
  content          String?   @db.Text
  audioUrl         String?   @map("audio_url") @db.VarChar(500) // Optional MP3 file URL - DEPRECATED
  mediaId          String?   @map("media_id") // New field for uploaded files
  orderPosition    Int       @map("order_position")
  textAlign        String    @default("left") @map("text_align") // "left" or "right"
  verticalAlign    String    @default("center") @map("vertical_align") // "top", "center", or "bottom"
  parentId         String?   @map("parent_id") // NULL for main articles, parent ID for sub-articles
  published        Boolean   @default(true) // false for unpublished/completed slides
  isProject        Boolean   @default(false) @map("is_project") // true for imported markdown projects
  isFavorite       Boolean   @default(false) @map("is_favorite") // true for favorite/starred articles
  temporarilyUnpublished Boolean @default(false) @map("temporarily_unpublished") // true when star clicked on frontend
  unpublishedDate  DateTime? @map("unpublished_date") // when it was temporarily unpublished
  articleType      String?   @map("article_type") @db.VarChar(50) // Type of article: meditation, education, personal, spiritual, routine
  pauseDuration    Int?      @map("pause_duration") // Seconds to pause between MP3s in auto-row-play (5, 10, 15, 30)
  isChallenge      Boolean   @default(false) @map("is_challenge") // true for challenge rows
  challengeDuration Int?     @map("challenge_duration") // 30, 60, or 90 days
  challengeStartDate DateTime? @map("challenge_start_date") // When challenge begins
  challengeEndDate DateTime? @map("challenge_end_date") // When challenge ends
  rowBackgroundColor String? @map("row_background_color") @db.VarChar(7) // Hex color code for row background in admin (main articles only)
  rowPublishTimeStart String? @map("row_publish_time_start") @db.VarChar(5) // "HH:MM" format for row-level time-based publishing
  rowPublishTimeEnd   String? @map("row_publish_time_end") @db.VarChar(5) // "HH:MM" format for row-level time-based publishing
  rowPublishDays      String? @map("row_publish_days") @db.VarChar(200) // JSON array of days or "all" for row-level publishing
  publishTimeStart String?   @map("publish_time_start") @db.VarChar(5) // "HH:MM" format for time-based publishing
  publishTimeEnd   String?   @map("publish_time_end") @db.VarChar(5) // "HH:MM" format for time-based publishing
  publishDays      String?   @map("publish_days") @db.VarChar(200) // JSON array of days or "all"
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  parent        Article?  @relation("ArticleToSubArticles", fields: [parentId], references: [id], onDelete: Cascade)
  subArticles   Article[] @relation("ArticleToSubArticles")
  media         Media?    @relation(fields: [mediaId], references: [id], onDelete: SetNull)
  challengeProgress     ChallengeProgress[] @relation("MainChallenge")
  subChallengeProgress  ChallengeProgress[] @relation("SubChallenge")

  @@index([orderPosition])
  @@index([parentId])
  @@index([published])
  @@index([mediaId])
  @@map("articles")
}

model Documentation {
  id            String          @id @default(uuid())
  title         String          @db.VarChar(255)
  subtitle      String?         @db.VarChar(500)
  content       String          @db.Text
  orderPosition Int             @map("order_position")
  textAlign     String          @default("left") @map("text_align") // "left" or "right"
  verticalAlign String          @default("center") @map("vertical_align") // "top", "center", or "bottom"
  parentId      String?         @map("parent_id") // NULL for main docs, parent ID for sub-docs
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  parent        Documentation?  @relation("DocumentationToSubDocs", fields: [parentId], references: [id], onDelete: Cascade)
  subDocs       Documentation[] @relation("DocumentationToSubDocs")

  @@index([orderPosition])
  @@index([parentId])
  @@map("documentation")
}

model MediaFolder {
  id        String        @id @default(uuid())
  name      String        @db.VarChar(255)
  path      String        @db.VarChar(500) // Folder path
  parentId  String?       @map("parent_id") // For nested folders
  createdAt DateTime      @default(now()) @map("created_at")

  parent    MediaFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  MediaFolder[] @relation("FolderHierarchy")
  media     Media[]

  @@index([parentId])
  @@map("media_folders")
}

model Media {
  id         String       @id @default(uuid())
  filename   String       @db.VarChar(255) // Original filename
  storedName String       @map("stored_name") @db.VarChar(255) // Generated unique filename
  path       String       @db.VarChar(500) // Full server path
  url        String       @db.VarChar(500) // Public URL for serving
  size       Int          // File size in bytes
  mimeType   String       @map("mime_type") @db.VarChar(100) // audio/mpeg, etc.
  folderId   String?      @map("folder_id") // Optional folder organization
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  folder     MediaFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  articles   Article[]

  @@index([folderId])
  @@map("media")
}

model Settings {
  id                String   @id @default(uuid())
  key               String   @unique @db.VarChar(100)
  value             String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model ChallengeProgress {
  id           String   @id @default(uuid())
  articleId    String   @map("article_id")
  article      Article  @relation("MainChallenge", fields: [articleId], references: [id], onDelete: Cascade)
  subArticleId String   @map("sub_article_id")
  subArticle   Article  @relation("SubChallenge", fields: [subArticleId], references: [id], onDelete: Cascade)
  completedAt  DateTime @map("completed_at")
  day          Int      // Which day of the challenge (1-90)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([articleId])
  @@index([subArticleId])
  @@index([completedAt])
  @@map("challenge_progress")
}
